diff --git a/demo/pom.xml b/demo/pom.xml
index 0a0a6a6..81ce236 100644
--- a/demo/pom.xml
+++ b/demo/pom.xml
@@ -165,7 +165,23 @@
                 </exclusion>
             </exclusions>
         </dependency>
-
+		
+		<!-- PicketLink dependencies. They will provide all security capabilities for the application. -->
+		
+		<!-- PicketLink Core provides authentication, authorization and identity management services. -->
+		<dependency>
+			<groupId>org.picketlink</groupId>
+			<artifactId>picketlink-core-impl</artifactId>
+			<version>3.0.0-SNAPSHOT</version>
+		</dependency>
+		
+		<!-- PicketLink IDM Schema provides some built-in JPA entities to be used with the JPA Identity Store. -->
+		<dependency>
+			<groupId>org.picketlink</groupId>
+			<artifactId>picketlink-idm-schema</artifactId>
+			<version>3.0.0-SNAPSHOT</version>
+		</dependency>
+		
 
         <!-- The next set of dependencies are for Errai, which we use for 
             the TicketMonster booking monitor -->
diff --git a/demo/src/main/java/org/jboss/jdf/example/ticketmonster/util/Resources.java b/demo/src/main/java/org/jboss/jdf/example/ticketmonster/util/Resources.java
index 0c91fef..9400798 100644
--- a/demo/src/main/java/org/jboss/jdf/example/ticketmonster/util/Resources.java
+++ b/demo/src/main/java/org/jboss/jdf/example/ticketmonster/util/Resources.java
@@ -7,6 +7,8 @@
 import javax.persistence.EntityManager;
 import javax.persistence.PersistenceContext;
 
+import org.picketlink.annotations.PicketLink;
+
 /**
  * This class uses CDI to alias Java EE resources, such as the persistence context, to CDI beans
  * 
@@ -25,21 +27,30 @@
      * Alias the persistence context
      */
     // use @SuppressWarnings to tell IDE to ignore warnings about field not being referenced directly
-   @SuppressWarnings("unused")
-   @Produces
-   @PersistenceContext
-   private EntityManager em;
-   
-   /**
-    * Provider injectable loggers based around Java Util Logging.
-    * @param injectionPoint
-    * @return
-    */
-   @Produces
-   public Logger produceLog(InjectionPoint injectionPoint) {
-      return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());
-   }
- 
-   
-   
+    @SuppressWarnings("unused")
+    @Produces
+    @PersistenceContext(unitName = "primary")
+    private EntityManager em;
+
+    /**
+     * <p>
+     * Produces a {@link EntityManager} using the qualifier {@link PicketLink} that will be used by the PicketLink IDM.
+     * </p>
+     */
+    @Produces
+    @PicketLink
+    @PersistenceContext(unitName = "picketlink-pu")
+    private EntityManager picketLinkEntityManager;
+
+    /**
+     * Provider injectable loggers based around Java Util Logging.
+     * 
+     * @param injectionPoint
+     * @return
+     */
+    @Produces
+    public Logger produceLog(InjectionPoint injectionPoint) {
+        return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());
+    }
+
 }
diff --git a/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AbstractSecurityTestCase.java b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AbstractSecurityTestCase.java
new file mode 100644
index 0000000..902bea1
--- /dev/null
+++ b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AbstractSecurityTestCase.java
@@ -0,0 +1,85 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+
+package org.jboss.jdf.ticketmonster.test.security;
+
+import javax.inject.Inject;
+import javax.transaction.UserTransaction;
+
+import org.jboss.arquillian.container.test.api.Deployment;
+import org.jboss.arquillian.junit.Arquillian;
+import org.jboss.jdf.ticketmonster.test.TicketMonsterDeployment;
+import org.jboss.shrinkwrap.api.spec.WebArchive;
+import org.jboss.shrinkwrap.resolver.api.DependencyResolvers;
+import org.jboss.shrinkwrap.resolver.api.maven.MavenDependencyResolver;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.runner.RunWith;
+import org.picketlink.Identity;
+import org.picketlink.credential.DefaultLoginCredentials;
+import org.picketlink.idm.IdentityManager;
+
+/**
+ * @author Pedro Silva
+ *
+ */
+@RunWith(Arquillian.class)
+public abstract class AbstractSecurityTestCase {
+
+    @Deployment
+    public static WebArchive deployment() {
+        WebArchive deployment = TicketMonsterDeployment.deployment();
+
+        deployment
+            .addPackage(AbstractSecurityTestCase.class.getPackage())
+            .addAsLibraries(DependencyResolvers.use(MavenDependencyResolver.class)
+                    .loadMetadataFromPom("pom.xml")
+                        .artifact("org.picketlink:picketlink-core-impl").artifact("org.picketlink:picketlink-idm-schema")
+                        .artifact("org.infinispan:infinispan-core").scope("test")
+                        .resolveAsFiles());
+
+        return deployment;
+    }
+
+    @Inject
+    protected Identity identity;
+
+    @Inject
+    protected IdentityManager identityManager;
+
+    @Inject
+    protected UserTransaction userTransaction;
+    
+    @Inject
+    protected DefaultLoginCredentials credentials;
+
+    @Before
+    public void onInit() throws Exception {
+        this.userTransaction.begin();
+    }
+
+    @After
+    public void onFinish() throws Exception {
+        this.userTransaction.commit();
+    }
+    
+}
diff --git a/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AuthenticationTestCase.java b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AuthenticationTestCase.java
new file mode 100644
index 0000000..71687dd
--- /dev/null
+++ b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AuthenticationTestCase.java
@@ -0,0 +1,114 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+
+package org.jboss.jdf.ticketmonster.test.security;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import org.jboss.arquillian.junit.InSequence;
+import org.junit.Assert;
+import org.junit.Test;
+import org.picketlink.Identity;
+import org.picketlink.idm.IdentityManager;
+import org.picketlink.idm.credential.Password;
+import org.picketlink.idm.model.SimpleUser;
+import org.picketlink.idm.model.User;
+
+/**
+ * <p>
+ * Simple test case that shows how to use PicketLink components to test your application security capabilities.
+ * </p>
+ * <p>
+ * This test shows you how to use the {@link IdentityManager} to manage user information and credentials and also how to
+ * authenticate them using the {@link Identity} component.
+ * </p>
+ * 
+ * @author Pedro Silva
+ * 
+ */
+public class AuthenticationTestCase extends AbstractSecurityTestCase {
+
+    private static final String USER_LOGIN_NAME = "john";
+    private static final String USER_PASSWORD = "letmein";
+
+    @Test
+    @InSequence(1)
+    public void testCreateUser() throws Exception {
+        SimpleUser john = new SimpleUser(USER_LOGIN_NAME);
+
+        this.identityManager.add(john);
+
+        assertNotNull(this.identityManager.getUser(john.getLoginName()));
+    }
+
+    @Test
+    @InSequence(2)
+    public void testPopulateCredentials() throws Exception {
+        User john = this.identityManager.getUser(USER_LOGIN_NAME);
+
+        assertNotNull(john);
+
+        this.identityManager.updateCredential(john, new Password(USER_PASSWORD));
+    }
+
+    @Test
+    @InSequence(3)
+    public void testSuccessfulAuthentication() throws Exception {
+        this.credentials.setUserId(USER_LOGIN_NAME);
+        this.credentials.setCredential(new Password(USER_PASSWORD));
+
+        assertFalse(this.identity.isLoggedIn());
+
+        this.identity.login();
+
+        assertTrue(this.identity.isLoggedIn());
+    }
+
+    @Test
+    @InSequence(4)
+    public void testUnSuccessfulAuthentication() throws Exception {
+        this.credentials.setUserId(USER_LOGIN_NAME);
+        this.credentials.setCredential(new Password("letmein2"));
+
+        this.identity.login();
+
+        Assert.assertFalse(this.identity.isLoggedIn());
+    }
+
+    @Test
+    @InSequence(5)
+    public void testLogout() throws Exception {
+        this.credentials.setUserId(USER_LOGIN_NAME);
+        this.credentials.setCredential(new Password(USER_PASSWORD));
+
+        this.identity.login();
+
+        assertTrue(this.identity.isLoggedIn());
+
+        this.identity.logout();
+
+        assertFalse(this.identity.isLoggedIn());
+    }
+
+}
\ No newline at end of file
diff --git a/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/IdentityManagementTestCase.java b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/IdentityManagementTestCase.java
new file mode 100644
index 0000000..fd764e7
--- /dev/null
+++ b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/IdentityManagementTestCase.java
@@ -0,0 +1,130 @@
+/*
+ * JBoss, Home of Professional Open Source.
+ * Copyright 2012, Red Hat, Inc., and individual contributors
+ * as indicated by the @author tags. See the copyright.txt file in the
+ * distribution for a full listing of individual contributors.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+
+package org.jboss.jdf.ticketmonster.test.security;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+
+import org.jboss.arquillian.junit.InSequence;
+import org.junit.Test;
+import org.picketlink.idm.IdentityManager;
+import org.picketlink.idm.model.Group;
+import org.picketlink.idm.model.Role;
+import org.picketlink.idm.model.SimpleGroup;
+import org.picketlink.idm.model.SimpleRole;
+import org.picketlink.idm.model.SimpleUser;
+import org.picketlink.idm.model.User;
+
+/**
+ * <p>
+ * Simple test case that shows how to use PicketLink components to test your application security capabilities.
+ * </p>
+ * <p>
+ * This test shows you how to use the {@link IdentityManager} to manage user, role and group information and also the
+ * relationship between them.
+ * </p>
+ * 
+ * @author Pedro Silva
+ * 
+ */
+public class IdentityManagementTestCase extends AbstractSecurityTestCase {
+
+    @Test
+    @InSequence(1)
+    public void testCreateUser() throws Exception {
+        User john = new SimpleUser("john");
+
+        john.setFirstName("John");
+        john.setLastName("The Monster");
+        john.setEmail("john@ticketmonster.org");
+        
+        this.identityManager.add(john);
+
+        john = this.identityManager.getUser(john.getLoginName());
+        
+        assertNotNull(john);
+        assertEquals("John", john.getFirstName());
+        assertEquals("The Monster", john.getLastName());
+        assertEquals("john@ticketmonster.org", john.getEmail());
+    }
+
+    @Test
+    @InSequence(2)
+    public void testCreateRole() throws Exception {
+        Role administrator = new SimpleRole("Administrator");
+        
+        this.identityManager.add(administrator);
+        
+        assertNotNull(this.identityManager.getRole(administrator.getName()));
+    }
+
+    @Test
+    @InSequence(3)
+    public void testCreateGroup() throws Exception {
+        Group administrators = new SimpleGroup("Administrators");
+        
+        this.identityManager.add(administrators);
+        
+        assertNotNull(this.identityManager.getGroup(administrators.getName()));
+    }
+
+    @Test
+    @InSequence(4)
+    public void testAssociateUserWithRole() throws Exception {
+        User john = this.identityManager.getUser("john");
+        Role administrator = this.identityManager.getRole("Administrator");
+        
+        this.identityManager.grantRole(john, administrator);
+        
+        assertTrue(this.identityManager.hasRole(john, administrator));
+    }
+
+    @Test
+    @InSequence(5)
+    public void testAssociateUserWithGroup() throws Exception {
+        User john = this.identityManager.getUser("john");
+        Group administrators = this.identityManager.getGroup("Administrators");
+        
+        this.identityManager.addToGroup(john, administrators);
+        
+        assertTrue(this.identityManager.isMember(john, administrators));
+    }
+
+    @Test
+    @InSequence(6)
+    public void testAssociateUserWithGroupAndRole() throws Exception {
+        User john = this.identityManager.getUser("john");
+        Role manager = new SimpleRole("Manager");
+        Group sales = new SimpleGroup("Sales");
+        
+        this.identityManager.add(manager);
+        this.identityManager.add(sales);
+        
+        // john is now a Manager of the Sales group
+        this.identityManager.grantGroupRole(john, manager, sales);
+        
+        assertTrue(this.identityManager.hasGroupRole(john, manager, sales));
+    }
+
+}
\ No newline at end of file
diff --git a/demo/src/test/resources/META-INF/test-persistence.xml b/demo/src/test/resources/META-INF/test-persistence.xml
index effbe09..93fce38 100644
--- a/demo/src/test/resources/META-INF/test-persistence.xml
+++ b/demo/src/test/resources/META-INF/test-persistence.xml
@@ -1,30 +1,52 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!-- JBoss, Home of Professional Open Source Copyright 2012, Red Hat, Inc. 
-    and/or its affiliates, and individual contributors by the @authors tag. See 
-    the copyright.txt in the distribution for a full listing of individual contributors. 
-    Licensed under the Apache License, Version 2.0 (the "License"); you may not 
-    use this file except in compliance with the License. You may obtain a copy 
-    of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
-    by applicable law or agreed to in writing, software distributed under the 
-    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
-    OF ANY KIND, either express or implied. See the License for the specific 
-    language governing permissions and limitations under the License. -->
+	and/or its affiliates, and individual contributors by the @authors tag. See 
+	the copyright.txt in the distribution for a full listing of individual contributors. 
+	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
+	use this file except in compliance with the License. You may obtain a copy 
+	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
+	by applicable law or agreed to in writing, software distributed under the 
+	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
+	OF ANY KIND, either express or implied. See the License for the specific 
+	language governing permissions and limitations under the License. -->
 <persistence version="2.0"
-   xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-   xsi:schemaLocation="
+	xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="
         http://java.sun.com/xml/ns/persistence
         http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">
-   <persistence-unit name="primary">
-      <!-- We use a different datasource for tests, so as to not overwrite 
-         production data. This is an unmanaged data source, backed by H2, an in memory 
-         database. Production applications should use a managed datasource. -->
-      <!-- The datasource is deployed as WEB-INF/test-ds.xml, 
-         you can find it in the source at src/test/resources/test-ds.xml -->
-      <jta-data-source>java:jboss/datasources/TicketMonsterTestDS</jta-data-source>
-      <properties>
-         <!-- Properties for Hibernate -->
-         <property name="hibernate.hbm2ddl.auto" value="create-drop" />
-         <property name="hibernate.show_sql" value="false" />
-      </properties>
-   </persistence-unit>
+	<persistence-unit name="primary">
+		<!-- We use a different datasource for tests, so as to not overwrite production 
+			data. This is an unmanaged data source, backed by H2, an in memory database. 
+			Production applications should use a managed datasource. -->
+		<!-- The datasource is deployed as WEB-INF/test-ds.xml, you can find it 
+			in the source at src/test/resources/test-ds.xml -->
+		<jta-data-source>java:jboss/datasources/TicketMonsterTestDS</jta-data-source>
+
+		<properties>
+			<!-- Properties for Hibernate -->
+			<property name="hibernate.hbm2ddl.auto" value="create-drop" />
+			<property name="hibernate.show_sql" value="false" />
+		</properties>
+	</persistence-unit>
+
+	<persistence-unit name="picketlink-pu">
+		<jta-data-source>java:jboss/datasources/TicketMonsterTestDS</jta-data-source>
+
+		<class>org.picketlink.idm.jpa.schema.IdentityObject</class>
+		<class>org.picketlink.idm.jpa.schema.PartitionObject</class>
+		<class>org.picketlink.idm.jpa.schema.RelationshipObject</class>
+		<class>org.picketlink.idm.jpa.schema.RelationshipIdentityObject</class>
+		<class>org.picketlink.idm.jpa.schema.RelationshipIdentityWeakObject</class>
+		<class>org.picketlink.idm.jpa.schema.RelationshipObjectAttribute</class>
+		<class>org.picketlink.idm.jpa.schema.IdentityObjectAttribute</class>
+		<class>org.picketlink.idm.jpa.schema.CredentialObject</class>
+		<class>org.picketlink.idm.jpa.schema.CredentialObjectAttribute</class>
+
+		<properties>
+			<!-- Properties for Hibernate -->
+			<property name="hibernate.hbm2ddl.auto" value="create-drop" />
+			<property name="hibernate.show_sql" value="false" />
+		</properties>
+	</persistence-unit>
+
 </persistence>
diff --git a/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AbstractSecurityTestCase.java b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AbstractSecurityTestCase.java
index 902bea1..e95cf80 100644
--- a/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AbstractSecurityTestCase.java
+++ b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AbstractSecurityTestCase.java
@@ -35,7 +35,6 @@
 import org.junit.Before;
 import org.junit.runner.RunWith;
 import org.picketlink.Identity;
-import org.picketlink.credential.DefaultLoginCredentials;
 import org.picketlink.idm.IdentityManager;
 
 /**
@@ -69,9 +68,6 @@ public static WebArchive deployment() {
     @Inject
     protected UserTransaction userTransaction;
     
-    @Inject
-    protected DefaultLoginCredentials credentials;
-
     @Before
     public void onInit() throws Exception {
         this.userTransaction.begin();
diff --git a/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AuthenticationTestCase.java b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AuthenticationTestCase.java
index 71687dd..e582b46 100644
--- a/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AuthenticationTestCase.java
+++ b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/AuthenticationTestCase.java
@@ -26,10 +26,13 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
+import javax.inject.Inject;
+
 import org.jboss.arquillian.junit.InSequence;
 import org.junit.Assert;
 import org.junit.Test;
 import org.picketlink.Identity;
+import org.picketlink.credential.DefaultLoginCredentials;
 import org.picketlink.idm.IdentityManager;
 import org.picketlink.idm.credential.Password;
 import org.picketlink.idm.model.SimpleUser;
@@ -52,24 +55,27 @@
     private static final String USER_LOGIN_NAME = "john";
     private static final String USER_PASSWORD = "letmein";
 
+    @Inject
+    protected DefaultLoginCredentials credentials;
+    
     @Test
     @InSequence(1)
     public void testCreateUser() throws Exception {
         SimpleUser john = new SimpleUser(USER_LOGIN_NAME);
 
-        this.identityManager.add(john);
+        super.identityManager.add(john);
 
-        assertNotNull(this.identityManager.getUser(john.getLoginName()));
+        assertNotNull(super.identityManager.getUser(john.getLoginName()));
     }
 
     @Test
     @InSequence(2)
     public void testPopulateCredentials() throws Exception {
-        User john = this.identityManager.getUser(USER_LOGIN_NAME);
+        User john = super.identityManager.getUser(USER_LOGIN_NAME);
 
         assertNotNull(john);
 
-        this.identityManager.updateCredential(john, new Password(USER_PASSWORD));
+        super.identityManager.updateCredential(john, new Password(USER_PASSWORD));
     }
 
     @Test
@@ -78,11 +84,11 @@ public void testSuccessfulAuthentication() throws Exception {
         this.credentials.setUserId(USER_LOGIN_NAME);
         this.credentials.setCredential(new Password(USER_PASSWORD));
 
-        assertFalse(this.identity.isLoggedIn());
+        assertFalse(super.identity.isLoggedIn());
 
-        this.identity.login();
+        super.identity.login();
 
-        assertTrue(this.identity.isLoggedIn());
+        assertTrue(super.identity.isLoggedIn());
     }
 
     @Test
@@ -91,9 +97,9 @@ public void testUnSuccessfulAuthentication() throws Exception {
         this.credentials.setUserId(USER_LOGIN_NAME);
         this.credentials.setCredential(new Password("letmein2"));
 
-        this.identity.login();
+        super.identity.login();
 
-        Assert.assertFalse(this.identity.isLoggedIn());
+        Assert.assertFalse(super.identity.isLoggedIn());
     }
 
     @Test
@@ -102,13 +108,13 @@ public void testLogout() throws Exception {
         this.credentials.setUserId(USER_LOGIN_NAME);
         this.credentials.setCredential(new Password(USER_PASSWORD));
 
-        this.identity.login();
+        super.identity.login();
 
-        assertTrue(this.identity.isLoggedIn());
+        assertTrue(super.identity.isLoggedIn());
 
-        this.identity.logout();
+        super.identity.logout();
 
-        assertFalse(this.identity.isLoggedIn());
+        assertFalse(super.identity.isLoggedIn());
     }
 
 }
\ No newline at end of file
diff --git a/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/IdentityManagementTestCase.java b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/IdentityManagementTestCase.java
index fd764e7..3b2a564 100644
--- a/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/IdentityManagementTestCase.java
+++ b/demo/src/test/java/org/jboss/jdf/ticketmonster/test/security/IdentityManagementTestCase.java
@@ -59,9 +59,9 @@ public void testCreateUser() throws Exception {
         john.setLastName("The Monster");
         john.setEmail("john@ticketmonster.org");
         
-        this.identityManager.add(john);
+        super.identityManager.add(john);
 
-        john = this.identityManager.getUser(john.getLoginName());
+        john = super.identityManager.getUser(john.getLoginName());
         
         assertNotNull(john);
         assertEquals("John", john.getFirstName());
@@ -74,9 +74,9 @@ public void testCreateUser() throws Exception {
     public void testCreateRole() throws Exception {
         Role administrator = new SimpleRole("Administrator");
         
-        this.identityManager.add(administrator);
+        super.identityManager.add(administrator);
         
-        assertNotNull(this.identityManager.getRole(administrator.getName()));
+        assertNotNull(super.identityManager.getRole(administrator.getName()));
     }
 
     @Test
@@ -84,47 +84,47 @@ public void testCreateRole() throws Exception {
     public void testCreateGroup() throws Exception {
         Group administrators = new SimpleGroup("Administrators");
         
-        this.identityManager.add(administrators);
+        super.identityManager.add(administrators);
         
-        assertNotNull(this.identityManager.getGroup(administrators.getName()));
+        assertNotNull(super.identityManager.getGroup(administrators.getName()));
     }
 
     @Test
     @InSequence(4)
     public void testAssociateUserWithRole() throws Exception {
-        User john = this.identityManager.getUser("john");
-        Role administrator = this.identityManager.getRole("Administrator");
+        User john = super.identityManager.getUser("john");
+        Role administrator = super.identityManager.getRole("Administrator");
         
-        this.identityManager.grantRole(john, administrator);
+        super.identityManager.grantRole(john, administrator);
         
-        assertTrue(this.identityManager.hasRole(john, administrator));
+        assertTrue(super.identityManager.hasRole(john, administrator));
     }
 
     @Test
     @InSequence(5)
     public void testAssociateUserWithGroup() throws Exception {
-        User john = this.identityManager.getUser("john");
-        Group administrators = this.identityManager.getGroup("Administrators");
+        User john = super.identityManager.getUser("john");
+        Group administrators = super.identityManager.getGroup("Administrators");
         
-        this.identityManager.addToGroup(john, administrators);
+        super.identityManager.addToGroup(john, administrators);
         
-        assertTrue(this.identityManager.isMember(john, administrators));
+        assertTrue(super.identityManager.isMember(john, administrators));
     }
 
     @Test
     @InSequence(6)
     public void testAssociateUserWithGroupAndRole() throws Exception {
-        User john = this.identityManager.getUser("john");
+        User john = super.identityManager.getUser("john");
         Role manager = new SimpleRole("Manager");
         Group sales = new SimpleGroup("Sales");
         
-        this.identityManager.add(manager);
-        this.identityManager.add(sales);
+        super.identityManager.add(manager);
+        super.identityManager.add(sales);
         
         // john is now a Manager of the Sales group
-        this.identityManager.grantGroupRole(john, manager, sales);
+        super.identityManager.grantGroupRole(john, manager, sales);
         
-        assertTrue(this.identityManager.hasGroupRole(john, manager, sales));
+        assertTrue(super.identityManager.hasGroupRole(john, manager, sales));
     }
 
 }
 \ No newline at end of file
--  
1.8.1.5

